# We use Makefile for simplifying mvn command's usage.
# Since InspektorDog (shortened "insdog") is a Java-based component, its binary build and release should be done through mvn, without relying on Makefile.

BASH:=$(shell which bash)
PROJ_DIR:=$(shell pwd)

## This is a Makefile for "InspektorDog" project.
## - https://github.com/moneyforward/insdog/wiki/9-ContributionGuidelines%7CMakefile
ABOUT: help
	@echo "__ENV_RC__='${__ENV_RC__}'"
	:

## Pull secret variables from the special orphan branch
pull-secrets:
	@git fetch origin environment --depth 1
	@git restore --source origin/environment -- .env

print-secrets:
	@cat .env | sed 's/export //g'

## Cleans all intermediate files, which should be generated only under `target` directory.
clean: clean-mfdoc
	mvn -B clean

## Compiles production source code only
compile:
	mvn -B clean compile

## Executes unit tests
test:
	mvn -B clean compile test

## Generates wiki-site on your local.
## Generated site is found under .work/doc/wiki
## Please upgrade your local bash version by using `brew install bash`.
compile-wiki:
	$(BASH) -eu src/build_tools/mfdoc.sh compile-wiki -- "*.md:src/site/markdown:"

## Publishes generated site to the repo's wiki.
## Use with caution.
publish-wiki: clean-mfdoc compile-wiki _publish-wiki
	:

# Deploys wiki-site
_publish-wiki:
	$(BASH) -eu src/build_tools/mfdoc.sh publish-wiki

## Generates techdocs on your local.
## Generated site is found under .work/doc/techdocs
## Please upgrade your local bash version by using `brew install bash` before trying this target.
compile-techdocs:
	mvn -B pre-site
	$(BASH) -eu src/build_tools/mfdoc.sh compile-techdocs -- \
	                                                 "*.md:src/site/markdown:" \
	                                                 "*.md:target/classes/JavaMarkdown:3-APISpecification"

## Publishes generated site to the techdocs branch
## Use with caution.
publish-techdocs: clean-mfdoc compile-techdocs _publish-techdocs
	:

# Deploys wiki-site
_publish-techdocs:
	$(BASH) -eu src/build_tools/mfdoc.sh publish-techdocs \
	                                                 -- "*.md:src/site/markdown:"

## Cleans intermediate files generated by the `mfdoc.sh` tool.
clean-mfdoc:
	$(BASH) -eu src/build_tools/mfdoc.sh clean

## Generate Javadoc under `target/site/apidocs` dir.
javadoc:
	mvn -B clean compile test javadoc:javadoc

## Publish test report.
## You need to run `compile-test-report` target beforehand.
publish-test-report:
	$(BASH) -eu src/build_tools/tr-publish.sh target/testReport.xml '$(TR_TITLE)'

## Does "mvn package" without generating JavaDoc to save time.
package-without-javadoc:
	mvn -B -Dmaven.javadoc.skip=true clean compile package

## Does "mvn package"
package:
	mvn -B clean compile package

## Build.
## Internally executes `package-without-javadoc` target.
build: package-without-javadoc
	:

## Show help.
help:
	make2help $(MAKEFILE_LIST)
